#
# Simple PyROOT script to plot the "trend" of bytes generated by an 8-bit Linear-Feedback Shift Register (LFSR).
# The "random" sequence repeats after 256 values, fill the histogram to show only the first 4 replicated sequences.
#
# Luca Pacher - pacher@to.infn.it
# Fall 2020
#

## Python standard-library components
import sys
import os


#######################################
##   try to import ROOT components   ##
#######################################

try :
	import ROOT

except ImportError :

	print("\n**ERROR: ROOT components are required to run this application!\n")

	if( os.name == 'nt') :
		print("   call %ROOTSYS%\\bin\\thisroot.bat\n")
	else :
		print("   source $ROOTSYS/bin/thisroot.(c)sh\n")

	print("might solve this problem. Force an exit now.\n\n")
	## script failure
	raise SystemExit


####################################################################
##   open the ASCII file containing shift-register output bytes   ##
####################################################################

if(len(sys.argv) > 1) :

	if( os.path.isfile(sys.argv[1]) ) :

		file = open(sys.argv[1],"r")

	else :

		print("\n\n**ERROR: File name " + sys.argv[1] + " not found ! Force an exit.\n\n")

		## script failure
		raise SystemExit

else :

	## defaults to "work/sim/bytes.txt" otherwise
	if( os.path.isfile("work/sim/bytes.txt") ) :
	
		file = open("work/sim/bytes.txt","r")

	else :
		print("\n\n**ERROR: Default file name work/sim/bytes.txt not found ! Force an exit.\n\n") 

		## script failure
		raise SystemExit


#####################################################ss
##   histogram the trend of "random" LFSR output   ##
#####################################################

## don't show the statistics pane
ROOT.gStyle.SetOptStat(0)

## histogram the "trend" of LFSR outputs (not a true histogram indeed, just a trend)
histoBytes = ROOT.TH1F("histo", "LFSR output-code distribution", 256*4, -0.5, 256*4 + 0.5)   ## extra values simply goes into overflow bin

## **NOTE: in a ROOT histogram bin zero contains underflows, bin N+1 overflows
bin = 1

## enjoy the Python magic ...
for line in file :

	histoBytes.SetBinContent(bin, int(line.split("\n")[0]))
	bin = bin + 1


histoBytes.Draw()

## the "random" sequence repeats after 256 values, show only 4 repeated sequences
histoBytes.GetXaxis().SetRangeUser(0, 256*4)


## cosmetics
histoBytes.GetXaxis().SetTitle("tick")
histoBytes.GetYaxis().SetTitle("LFSR[7:0] integer value")
histoBytes.GetYaxis().CenterTitle()

ROOT.gPad.SetGridx()
ROOT.gPad.SetGridy()


## set y-axis log scale for easier pattern recognition
ROOT.gPad.SetLogy()
ROOT.gPad.Modified()
ROOT.gPad.Update()

## **REM: this is an alternative way to invoke python in interactive mode with python -i /path/to/script.py
print("\nPress RETURN to close the script ...\n")
raw_input()
